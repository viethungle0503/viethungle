"use strict";(self.webpackChunkviethungle_0503=self.webpackChunkviethungle_0503||[]).push([[4047],{6857:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"tutorials/cleanup-git-branches","title":"Cleaning Up Git Branches","description":"As your Git repository grows, you might accumulate many branches that are no longer needed. This tutorial will show you how to clean up both local and remote branches efficiently.","source":"@site/docs/tutorials/cleanup-git-branches.md","sourceDirName":"tutorials","slug":"/tutorials/cleanup-git-branches","permalink":"/viethungle/docs/tutorials/cleanup-git-branches","draft":false,"unlisted":false,"editUrl":"https://github.com/viethungle0503/viethungle/tree/main/docs/docs/tutorials/cleanup-git-branches.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Sparse Checkout in Git","permalink":"/viethungle/docs/tutorials/sparse-checkout"},"next":{"title":"Kh\u1eafc Ph\u1ee5c Symlink Nginx Proxy Manager Sau Backup Th\u1ee7 C\xf4ng","permalink":"/viethungle/docs/tutorials/nginx-proxy-manager-symlink-fix"}}');var c=r(4848),i=r(8453);const l={sidebar_position:2},a="Cleaning Up Git Branches",t={},o=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Cleaning Up Remote Branches",id:"cleaning-up-remote-branches",level:2},{value:"1. Prune Remote Branches",id:"1-prune-remote-branches",level:3},{value:"Cleaning Up Local Branches",id:"cleaning-up-local-branches",level:2},{value:"1. List Merged Branches",id:"1-list-merged-branches",level:3},{value:"2. Delete Merged Branches",id:"2-delete-merged-branches",level:3},{value:"3. Check Current Branch",id:"3-check-current-branch",level:3},{value:"Complete Cleanup Process",id:"complete-cleanup-process",level:2},{value:"Safety Tips",id:"safety-tips",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2},{value:"Issue: Cannot delete branch because it&#39;s not fully merged",id:"issue-cannot-delete-branch-because-its-not-fully-merged",level:3},{value:"Issue: Remote branch still exists after pruning",id:"issue-remote-branch-still-exists-after-pruning",level:3},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"cleaning-up-git-branches",children:"Cleaning Up Git Branches"})}),"\n",(0,c.jsx)(n.p,{children:"As your Git repository grows, you might accumulate many branches that are no longer needed. This tutorial will show you how to clean up both local and remote branches efficiently."}),"\n",(0,c.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Basic knowledge of Git"}),"\n",(0,c.jsx)(n.li,{children:"Access to a Git repository"}),"\n",(0,c.jsx)(n.li,{children:"Appropriate permissions to delete branches"}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"cleaning-up-remote-branches",children:"Cleaning Up Remote Branches"}),"\n",(0,c.jsx)(n.h3,{id:"1-prune-remote-branches",children:"1. Prune Remote Branches"}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"git remote prune"})," command removes references to remote branches that no longer exist on the remote repository:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"git remote prune origin\n"})}),"\n",(0,c.jsx)(n.p,{children:"This command will remove all stale remote-tracking branches that no longer exist on the remote repository."}),"\n",(0,c.jsx)(n.h2,{id:"cleaning-up-local-branches",children:"Cleaning Up Local Branches"}),"\n",(0,c.jsx)(n.h3,{id:"1-list-merged-branches",children:"1. List Merged Branches"}),"\n",(0,c.jsx)(n.p,{children:"To see which local branches have been merged into the current branch:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"git branch --merged\n"})}),"\n",(0,c.jsx)(n.h3,{id:"2-delete-merged-branches",children:"2. Delete Merged Branches"}),"\n",(0,c.jsx)(n.p,{children:"To delete all local branches that have been merged into the current branch (except the current branch itself):"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"For Bash/Linux/macOS:"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'git branch --merged | grep -v "\\*" | xargs -n 1 git branch -d\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"For Windows PowerShell:"})}),"\n",(0,c.jsx)(n.p,{children:"Option 1:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-powershell",children:"git branch --merged | Where-Object { $_ -notmatch '^\\*' } | ForEach-Object { $_.Trim() } | ForEach-Object { git branch -d $_ }\n"})}),"\n",(0,c.jsx)(n.p,{children:"Option 2:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-powershell",children:"git branch --merged | Where-Object { $_ -notmatch '^\\*' } | ForEach-Object { $_.Trim() } | ForEach-Object { git branch -d $_ }\n"})}),"\n",(0,c.jsx)(n.p,{children:"Option 3:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-powershell",children:"git branch --merged `\r\n  | Select-String -Pattern '^\\*' -NotMatch `\r\n  | ForEach-Object { $_.Line.Trim() } `\r\n  | ForEach-Object { git branch -d $_ }\n"})}),"\n",(0,c.jsx)(n.p,{children:"These commands:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["List all merged branches (",(0,c.jsx)(n.code,{children:"git branch --merged"}),")"]}),"\n",(0,c.jsxs)(n.li,{children:["Exclude the current branch (using ",(0,c.jsx)(n.code,{children:'grep -v "\\*"'})," in Bash or ",(0,c.jsx)(n.code,{children:"Where-Object"}),"/",(0,c.jsx)(n.code,{children:"Select-String"})," in PowerShell)"]}),"\n",(0,c.jsxs)(n.li,{children:["Delete each branch one by one (",(0,c.jsx)(n.code,{children:"xargs"})," in Bash or ",(0,c.jsx)(n.code,{children:"ForEach-Object"})," in PowerShell)"]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"3-check-current-branch",children:"3. Check Current Branch"}),"\n",(0,c.jsx)(n.p,{children:"To see which branch you're currently on:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"git rev-parse --abbrev-ref HEAD\n"})}),"\n",(0,c.jsx)(n.h2,{id:"complete-cleanup-process",children:"Complete Cleanup Process"}),"\n",(0,c.jsx)(n.p,{children:"Here's a complete workflow for cleaning up your Git repository:"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"First, make sure you're on the main branch:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"git checkout main\n"})}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"Pull the latest changes:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"git pull origin main\n"})}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"Prune remote branches:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"git remote prune origin\n"})}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["Delete merged local branches:\r\n",(0,c.jsx)(n.strong,{children:"For Bash/Linux/macOS:"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'git branch --merged | grep -v "\\*" | xargs -n 1 git branch -d\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"For Windows PowerShell:"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-powershell",children:"git branch --merged | Where-Object { $_ -notmatch '^\\*' } | ForEach-Object { $_.Trim() } | ForEach-Object { git branch -d $_ }\n"})}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"safety-tips",children:"Safety Tips"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsx)(n.li,{children:"Always make sure you're not on a branch you're about to delete"}),"\n",(0,c.jsxs)(n.li,{children:["Consider using ",(0,c.jsx)(n.code,{children:"-D"})," instead of ",(0,c.jsx)(n.code,{children:"-d"})," to force delete branches that haven't been merged"]}),"\n",(0,c.jsx)(n.li,{children:"Back up important branches before deletion"}),"\n",(0,c.jsx)(n.li,{children:"Check with your team before deleting shared branches"}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,c.jsx)(n.h3,{id:"issue-cannot-delete-branch-because-its-not-fully-merged",children:"Issue: Cannot delete branch because it's not fully merged"}),"\n",(0,c.jsxs)(n.p,{children:["Solution: Use the ",(0,c.jsx)(n.code,{children:"-D"})," flag to force delete:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"git branch -D branch-name\n"})}),"\n",(0,c.jsx)(n.h3,{id:"issue-remote-branch-still-exists-after-pruning",children:"Issue: Remote branch still exists after pruning"}),"\n",(0,c.jsx)(n.p,{children:"Solution: Make sure you have the latest information:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"git fetch --prune\n"})}),"\n",(0,c.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,c.jsx)(n.p,{children:"Regular branch cleanup is an important part of Git repository maintenance. It helps keep your repository organized and reduces confusion for team members. Remember to communicate with your team before deleting shared branches."})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var s=r(6540);const c={},i=s.createContext(c);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);